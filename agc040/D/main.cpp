#include <bits/stdc++.h>
using namespace std;

typedef long long Int;

//{{{ gcd and inverse
#define __GCD_H
Int gcd(Int a, Int b) {
	return b != 0 ? gcd(b, a % b) : a;
}
Int lcm(Int a, Int b) {
	return a / gcd(a, b) *b;
}
// a x + b y = gcd(a, b)
Int extgcd(Int a, Int b, Int &x, Int &y) {
	Int g = a; x = 1; y = 0;
	if (b != 0) g = extgcd(b, a % b, y, x), y -= (a / b) * x;
	return g;
}
Int invMod(Int a, Int m) {
	Int x, y;
	if (extgcd(a, m, x, y) == 1) return (x + m) % m;
	else                         return 0; // unsolvable
}
//}}}

void solve(long long N, std::vector<long long> A, std::vector<long long> B){
	Int s = accumulate(A.begin(), A.end(), 0ll);
	cerr<<s<<endl;
	sort(B.begin(), B.end());
	reverse(B.begin(), B.end());
	Int t = 0;
	for(int i = 0;i < N;t += B[i], i++){
		cerr<<"B[i]: "<<B[i]<<endl;
		if(t <= s and s <= t + B[i]){
			Int a = i * B[i] + s - t, b = N * B[i];
			Int g = gcd(a, b);
			a/=g;b/=g;
			cout<<a<<" "<<b<<endl;
			return;
		}
	}
	cout<<1<<" "<<1<<endl;
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    std::vector<long long> A(N);
    std::vector<long long> B(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&A[i]);
        scanf("%lld",&B[i]);
    }
    solve(N, std::move(A), std::move(B));
    return 0;
}
