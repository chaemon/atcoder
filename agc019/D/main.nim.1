#{{{ header
{.hints:off warnings:off optimization:speed.}
import algorithm, sequtils, tables, macros, math, sets, strutils
when defined(MYDEBUG):
  import header

import streams
proc scanf(formatstr: cstring){.header: "<stdio.h>", varargs.}
#proc getchar(): char {.header: "<stdio.h>", varargs.}
proc nextInt(): int = scanf("%lld",addr result)
proc nextFloat(): float = scanf("%lf",addr result)
proc nextString[F](f:F): string =
  var get = false
  result = ""
  while true:
#    let c = getchar()
    let c = f.readChar
    if c.int > ' '.int:
      get = true
      result.add(c)
    elif get: return
proc nextInt[F](f:F): int = parseInt(f.nextString)
proc nextFloat[F](f:F): float = parseFloat(f.nextString)
proc nextString():string = stdin.nextString()

type SomeSignedInt = int|int8|int16|int32|int64|BiggestInt
type SomeUnsignedInt = uint|uint8|uint16|uint32|uint64
type SomeInteger = SomeSignedInt|SomeUnsignedInt
type SomeFloat = float|float32|float64|BiggestFloat
template `max=`*(x,y:typed):void = x = max(x,y)
template `min=`*(x,y:typed):void = x = min(x,y)
template inf(T): untyped = 
  when T is SomeFloat: T(Inf)
  elif T is SomeInteger: ((T(1) shl T(sizeof(T)*8-2)) - (T(1) shl T(sizeof(T)*4-1)))
  else: assert(false)

proc sort[T](v: var seq[T]) = v.sort(cmp[T])
proc discardableId[T](x: T): T {.discardable.} =
  return x
macro `:=`(x, y: untyped): untyped =
  if (x.kind == nnkIdent):
    return quote do:
      when declaredInScope(`x`):
        `x` = `y`
      else:
        var `x` = `y`
      discardableId(`x`)
  else:
    return quote do:
      `x` = `y`
      discardableId(`x`)
macro dump*(x: typed): untyped =
  let s = x.toStrLit
  let r = quote do:
    debugEcho `s`, " = ", `x`
  return r

proc toStr[T](v:T):string =
  proc `$`[T](v:seq[T]):string =
    v.mapIt($it).join(" ")
  return $v

proc print0(x: varargs[string, toStr]; sep:string):string{.discardable.} =
  result = ""
  for i,v in x:
    if i != 0: addSep(result, sep = sep)
    add(result, v)
  result.add("\n")
  stdout.write result

var print:proc(x: varargs[string, toStr])
print = proc(x: varargs[string, toStr]) =
  discard print0(@x, sep = " ")

proc newNdSeqImpl[T](lens: seq[int]; init: T; currentDimension, lensLen: static[int]): auto =
  when currentDimension == lensLen:
    newSeqWith(lens[currentDimension - 1], init)
  else:
    newSeqWith(lens[currentDimension - 1], newNdSeqImpl(lens, init, currentDimension + 1, lensLen))

template newNdSeq*[T](lens: varargs[int]; init: T): untyped =
  newNdSeqImpl(@lens, init, 1, lens.len)
#}}}

var A:string
var B:string

#{{{ input part
proc main()
block:
  A = nextString()
  B = nextString()
#}}}

proc main() =
  let N = A.len
  ans := int.inf
  if B.count('1') == 0:
    if A != B: echo -1
    else: echo 0
    return
  var
    ldp = newSeqWith(N, -1)
    rdp = newSeqWith(N, -1)
  proc left(i:int):int =
    if ldp[i] >= 0: return ldp[i]
    if B[i] == '1':
      result = 0
    else:
      var j = i - 1
      if j < 0: j += N
      result = left(j) + 1
    ldp[i] = result
  proc right(i:int):int =
    if rdp[i] >= 0: return rdp[i]
    if B[i] == '1':
      result = 0
    else:
      var j = i + 1
      if j == N: j -= N
      result = right(j) + 1
    rdp[i] = result
  proc calc_min(v:seq[(int,int)]):int =
    if v.len == 0: return 0
    result = int.inf
    right_max := 0
    for i in countdown(v.len - 1, 0):
      # v[0]..v[i]: left
      # other: right
      result.min=v[i][0] + right_max
      right_max.max=v[i][1]
    # all right
    result.min=right_max
  for d in 0..<N:
    # inspect i -> j (right)  i..j
    j := d
    s := d
    v := newSeq[(int,int)]()
    for i in 0..<N:
      if A[i] != B[j]:
        s += 1
#        if B[j] == '0':
        block:
          var t = right(i)
          if t > d:
            t -= d
            v.add((left(i), t))
      j += 1
      if j == N: j = 0
    v.sort()
    s += v.calc_min() * 2
    ans.min=s
  for d in 1..<N:
    # inspect i -> j (left)   j..i
    j := N - d
    s := d
    v := newSeq[(int,int)]()
    for i in 0..<N:
      if A[i] != B[j]:
        s += 1
        if B[j] == '0':
          var t = right(j)
          if t > d:
            t -= d
            v.add((left(j), t))
      j += 1
      if j == N: j = 0
    v.sort()
    s += v.calc_min() * 2
    ans.min=s
  echo ans
  return

main()
