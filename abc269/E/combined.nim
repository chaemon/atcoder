import macros
macro Please(x): untyped = nnkStmtList.newTree()

Please use Nim-ACL
Please use Nim-ACL
Please use Nim-ACL


static:
  when not defined SecondCompile:
    # md5sum: 9e7b288abfd83d80d8cd2d0afd83ad82  atcoder.tar.xz

    template getFileName():string = instantiationInfo().filename
    let fn = getFileName()
    block:
      let (output, ex) = gorgeEx("if [ -e ./atcoder ]; then exit 1; else exit 0; fi")
      doAssert ex == 0, "atcoder directory already exisits"
    discard staticExec("echo \"\" | base64 -d > atcoder.tar.xz && tar -Jxvf atcoder.tar.xz")
    let (output, ex) = gorgeEx("nim cpp -d:release -d:SecondCompile -d:danger --path:./ --opt:speed --multimethods:on --warning[SmallLshouldNotBeUsed]:off --checks:off -o:a.out " & fn)
    discard staticExec("rm -rf ./atcoder");doAssert ex == 0, output;quit(0)


# see https://github.com/zer0-star/Nim-ACL/tree/master/src/atcoder/extra/header/chaemon_header.nim
include atcoder/extra/header/chaemon_header


const DEBUG = true

let N = nextInt()

var x, y: int

block:
  l := 0
  r := N
  while r - l > 1:
    let m = (l + r) shr 1
    # 0 ..< mを調べる
    echo "? ", 1, " ", m, " ", 1, " ", N
    let T = nextInt()
    if T == m:
      l = m
    else:
      r = m
    x = r
block:
  l := 0
  r := N
  while r - l > 1:
    let m = (l + r) shr 1
    # 0 ..< mを調べる
    echo "? ", 1, " ", N, " ", 1, " ", m
    let T = nextInt()
    if T == m:
      l = m
    else:
      r = m
    y = r

echo "! ", x, " ", y
