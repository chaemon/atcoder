#{{{ header
import algorithm, sequtils, tables, macros, math, sets, strutils, streams
when defined(MYDEBUG):
  import header
else:
  {.hints:off checks:off}

proc scanf(formatstr: cstring){.header: "<stdio.h>", varargs.}
proc getchar(): char {.header: "<stdio.h>", varargs.}
proc nextInt(base:int = 0): int =
  scanf("%lld",addr result)
  result -= base
proc nextFloat(): float = scanf("%lf",addr result)
proc nextString(): string =
  var get = false;result = ""
  while true:
    var c = getchar()
    if int(c) > int(' '): get = true;result.add(c)
    elif get: break
template `max=`*(x,y:typed):void = x = max(x,y)
template `min=`*(x,y:typed):void = x = min(x,y)
template infty(T): untyped = ((T(1) shl T(sizeof(T)*8-2)) - 1)

proc sort[T](a:var seq[T]) = a.sort(cmp[T])
#}}}

proc cumsummed[T](a:seq[T]):seq[T] =
  result = newSeq[T]()
  var s = T(0)
  for ai in a:
    s += ai
    result.add(s)

proc solve(N:int, A:seq[int]) =
  let B = 300010
  var ct = newSeqWith(B, 0)
  for a in A: ct[a] += 1
  var v = newSeq[int]()
  for c in ct:
    if c > 0: v.add(c)
  v.sort()
#  echo v
  var cs = v.cumsummed()
  var c = 1
  var ans = newSeqWith(N+2,0)
  ans[N+1] = 0
  while c <= N:
    # c times
    let t = v.lowerBound(c)
    var s = 0
    if t >= 1: s += cs[t - 1]
    s += (v.len - t) * c
    let m = s div c
    ans[m] .max= c
    c += 1
#    echo "get: ", c, " ", m
  var val = int.infty
  for t in countdown(N,1):
    ans[t] = max(ans[t], ans[t+1])
  for t in 1..N:
    echo ans[t]
  return

#{{{ main function
proc main() =
  var N = 0
  N = nextInt()
  var A = newSeqWith(N, 0)
  for i in 0..<N:
    A[i] = nextInt()
  solve(N, A);
  return

main()
#}}}
