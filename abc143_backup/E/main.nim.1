#{{{ header
import algorithm, sequtils, tables, macros, math, sets, strutils, streams
when defined(MYDEBUG):
  import header
else:
  {.hints:off checks:off}

proc scanf(formatstr: cstring){.header: "<stdio.h>", varargs.}
proc getchar(): char {.header: "<stdio.h>", varargs.}
proc nextInt(base:int = 0): int =
  scanf("%lld",addr result)
  result -= base
proc nextFloat(): float = scanf("%lf",addr result)
proc nextString(): string =
  var get = false;result = ""
  while true:
    var c = getchar()
    if int(c) > int(' '): get = true;result.add(c)
    elif get: break
template `max=`*(x,y:typed):void = x = max(x,y)
template `min=`*(x,y:typed):void = x = min(x,y)
template infty(T): untyped = ((T(1) shl T(sizeof(T)*8-2)) - 1)
#}}}

proc shortest_path(dist: seq[seq[int]]): seq[seq[int]] =
  let N = dist.len
  var dist = dist
  for k in 0..<N:
    for i in 0..<N:
      for j in 0..<N:
        let d = dist[i][k] + dist[k][j]
        if dist[i][j] > d: dist[i][j] = d
  return dist

proc solve(N:int, M:int, L:int, A:seq[int], B:seq[int], C:seq[int], Q:int, s:seq[int], t:seq[int]) =
  var dist = newSeqWith(N,newSeqWith(N,int.infty))
  for u in 0..<N: dist[u][u] = 0
  for i in 0..<M:
    dist[A[i]][B[i]] = C[i]
    dist[B[i]][A[i]] = C[i]
  dist = shortest_path(dist)
  var dist2 = newSeqWith(N,newSeqWith(N,int.infty))
  for u in 0..<N:
    for v in 0..<N:
      if u == v: dist2[u][v] = 0
      elif dist[u][v] <= L:
        dist2[u][v] = 1
  dist2 = shortest_path(dist2)
  for i in 0..<Q:
    if dist[s[i]][t[i]] <= L:
      echo 0
    else:
      let v = dist2[s[i]][t[i]]
      if v == int.infty:
        echo -1
      else:
        echo v - 1
  return

#{{{ main function
proc main() =
  var N = 0
  N = nextInt()
  var M = 0
  M = nextInt()
  var L = 0
  L = nextInt()
  var A = newSeqWith(M, 0)
  var B = newSeqWith(M, 0)
  var C = newSeqWith(M, 0)
  for i in 0..<M:
    A[i] = nextInt(1)
    B[i] = nextInt(1)
    C[i] = nextInt()
  var Q = 0
  Q = nextInt()
  var s = newSeqWith(Q, 0)
  var t = newSeqWith(Q, 0)
  for i in 0..<Q:
    s[i] = nextInt(1)
    t[i] = nextInt(1)
  solve(N, M, L, A, B, C, Q, s, t);
  return

main()
#}}}
