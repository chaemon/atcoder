import macros
macro Please(x): untyped = nnkStmtList.newTree()

Please use Nim-ACL
Please use Nim-ACL
Please use Nim-ACL


static:
  when not defined SecondCompile:
    # md5sum: 7611f27e606d89f2eab0b8ebf6981640  atcoder.tar.xz

    template getFileName():string = instantiationInfo().filename
    let fn = getFileName()
    block:
      let (output, ex) = gorgeEx("if [ -e ./atcoder ]; then exit 1; else exit 0; fi")
      doAssert ex == 0, "atcoder directory already exisits"
    discard staticExec("echo \"\" | base64 -d > atcoder.tar.xz && tar -Jxvf atcoder.tar.xz")
    let (output, ex) = gorgeEx("nim cpp -d:release -d:SecondCompile -d:danger --path:./ --opt:speed --multimethods:on --warning[SmallLshouldNotBeUsed]:off --checks:off -o:a.out " & fn)
    discard staticExec("rm -rf ./atcoder");doAssert ex == 0, output;quit(0)


when defined SecondCompile:
  const DO_CHECK = false;const DEBUG = false
else:
  const DO_CHECK = true;const DEBUG = true
const
  USE_DEFAULT_TABLE = true

# see https://github.com/zer0-star/Nim-ACL/tree/master/src/atcoder/extra/header/chaemon_header.nim
include atcoder/extra/header/chaemon_header


solveProc solve():
  let D = nextInt()
  let A, B = nextString()
  var
    c = 0
    ans = ""
  let m = max(A.len, B.len)
  proc get(A:string, i:int):char =
    let i = A.len - 1 - i
    if i < 0: return '0'
    else: return A[i]
  for i in m:
    if A.get(i) == '.':
      ans.add '.'
    else:
      c += A.get(i) - '0'
      c += B.get(i) - '0'
      let q = c div 10
      c = c mod 10
      ans.add '0' + c
      c = q
  if c != 0:
    ans.add '0' + c
  ans.reverse
  echo ans
  discard

when not defined(DO_TEST):
  solve()
else:
  discard

